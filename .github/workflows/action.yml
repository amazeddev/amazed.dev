name: Deploy Infrastructure

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build app
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      # checkout repo
      - name: Checkout Repo
        uses: actions/checkout@v1

      - name: Setup node-16 with cahce
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: app/package-lock.json
      # Build the static site
      - name: Create static build
        run: npm ci && npm run build
        working-directory: app
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://wsxhrfxovpscmomfkfne.supabase.co
          NEXT_PUBLIC_SUPABASE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_CLIENT_KEY }}
      # Upload the artifact for other stages to use
      - name: Share artifact in github workflow
        uses: actions/upload-artifact@v1
        with:
          name: out
          path: app/out

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: build
    steps:
      # checkout repo
      - name: Checkout Repo
        uses: actions/checkout@v1
      # Download the build artifact
      - name: Get build artifact
        uses: actions/download-artifact@v1
        with:
          name: out
          path: app/out
      # Setup the AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      # Terraform
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: terraform

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
        working-directory: terraform

      # Sync website to s3
      - name: Sync S3
        run: aws s3 sync ./app/out s3://amazed.dev

      - name: Terraform outputs
        id: tf_output
        run: |
          echo "cf_distribution=$(terraform output cf_distribution)" >> $GITHUB_OUTPUT
        working-directory: terraform

      # - name: Invalidate CloudFront
      #   uses: chetan/invalidate-cloudfront-action@v2
      #   env:
      #     DISTRIBUTION: ${{ steps.tf_output.outputs.cf_distribution }}
      #     PATHS: "/*"
      #     DEBUG: "1"

      # - name: Terraform Destroy
      #   id: destroy
      #   run: terraform destroy -auto-approve
      #   working-directory: terraform
